import { useEffect, useRef } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { useUserRole } from "@/hooks/useUserRole";

export function AutoSyncUsers() {
  const { user } = useAuth();
  const { isAdmin, isDono } = useUserRole();
  const hasSynced = useRef(false);

  useEffect(() => {
    // S√≥ executa uma vez e apenas para admins/donos
    if (!user || (!isAdmin && !isDono) || hasSynced.current) {
      return;
    }

    const syncUsers = async () => {
      try {
        console.log('üîÑ Iniciando sincroniza√ß√£o autom√°tica de usu√°rios...');
        
        const { data: { session } } = await supabase.auth.getSession();
        
        if (!session) {
          console.log('‚ùå Sem sess√£o ativa');
          return;
        }

        // Chamar a edge function de sincroniza√ß√£o
        const { data, error } = await supabase.functions.invoke('sync-all-users-to-auth', {
          headers: {
            Authorization: `Bearer ${session.access_token}`
          }
        });

        if (error) {
          console.error('‚ùå Erro na sincroniza√ß√£o:', error);
          return;
        }

        if (data?.success && data?.results) {
          const { results } = data;
          
          if (results.created.length > 0) {
            console.log(`‚úÖ ${results.created.length} usu√°rios sincronizados com sucesso!`);
            console.log('Usu√°rios criados:', results.created.map((u: any) => u.email));
          } else {
            console.log('‚úì Todos os usu√°rios j√° est√£o sincronizados');
          }

          if (results.errors.length > 0) {
            console.warn('‚ö†Ô∏è Alguns erros encontrados:', results.errors);
          }
        }

        hasSynced.current = true;
      } catch (error) {
        console.error('‚ùå Erro na sincroniza√ß√£o autom√°tica:', error);
      }
    };

    // Executar ap√≥s 2 segundos do login
    const timer = setTimeout(syncUsers, 2000);

    return () => clearTimeout(timer);
  }, [user, isAdmin, isDono]);

  return null; // Componente invis√≠vel
}
